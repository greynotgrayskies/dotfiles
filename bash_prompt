# Sets bash prompt
#
# Adapted from:
# https://github.com/albert12132/dotfiles/blob/master/bash-files/bash_prompt

# Bash provides an environment variable called `PROMPT_COMMAND`. The contents
# of this variable are executed as a regular Bash command just before Bash
# displays a prompt.
# http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x264.html
promptCommand() {
    # Needs to be done first, since otherwise we might lose the exit code.
    local EXIT_CODE=$?

    local EXIT_STATUS
    local GIT_PROMPT
    local WORK_DIRECTORY
    local PROMPT
    local DATE
    local VIRTUALENV_INDICATOR

    # Exit Status Display
    if [[ ${EXIT_CODE} != 0 ]]; then
        EXIT_STATUS="${LIGHT_RED}(exit status: ${EXIT_CODE})\n"
    fi

    # Git Display
    if $(isGitRepo); then
        local GIT_BRANCH=$(git branch 2> /dev/null | sed -n 's/^\* //p')
        GIT_PROMPT=" "
        if [[ $(gitStatus) -eq 0 ]]; then
            GIT_PROMPT+="${DEFAULT}(${GREEN}"'$(gitBranch)'"${DEFAULT})"
        else
            GIT_PROMPT+="${DEFAULT}(${YELLOW}"'$(gitBranch)'"${DEFAULT})"
        fi
    fi

    if isVirtualEnv; then
      VIRTUALENV_INDICATOR=" ${DEFAULT}(${GREY}$(basename ${VIRTUAL_ENV})${DEFAULT})"
    fi

    DATE="${LIGHT_BLACK}$(date +%c)\n"
    WORK_DIRECTORY="${YELLOW}\u@\h:${DEFAULT}\w"
    PROMPT="${BOLD}${LIGHT_GREEN}\$${DEFAULT} "

    export PS1="${DEFAULT}${EXIT_STATUS}${DATE}${WORK_DIRECTORY}${GIT_PROMPT}${VIRTUALENV_INDICATOR}\n${PROMPT}"
}

# Should be a triangle? May not appear correctly until the powerline font is
# actually properly installed.
# http://askubuntu.com/questions/283908/how-can-i-install-and-use-powerline-plugin
SEPARATOR="\uE0B0"

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null
then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
else
    color_prompt=
fi

isVirtualEnv() {
    env | grep -q 'VIRTUAL_ENV='
}

isGitRepo() {
    git status &> /dev/null
}

gitBranch() {
    local branch=$(git branch 2> /dev/null | sed -n 's/^\* //p')
    if [ -n "$branch" ] ; then echo $branch ; else echo "no commits"; fi
}

gitStatus() {
    local changes=$(git status --short 2> /dev/null | wc -l)
    echo $changes
}

# Outputs a message containing the exit code of a previous command if it
# resulted in a non-zero exit code
exitStatusPrompt() {
    EXIT_CODE=$?
    if [[ ${EXIT_CODE} != 0 ]]; then
        echo "${RED}(exit status: ${EXIT_CODE})\n"
    fi
}

# Fancy Terminal Colors (more than necessary)
# https://en.wikipedia.org/wiki/ANSI_escape_code
#
# Gnome Terminal apparently can support 24-bit colors, but requires to be
# linked against libvte >= 0.36, so it doesn't work in Ubuntu 14.04. Can't be
# bothered at the moment.
# http://askubuntu.com/questions/512525/how-to-enable-24bit-true-color-support-in-gnome-terminal

# Returns the ANSI control sequence for a 24-bit foreground color.
fgcolor() {
    echo "\e[38;2;$1;$2;$3m"
}

# Returns the ANSI control sequence for a 24-bit background color.
bgcolor() {
    echo "\e[48;2;$1;$2;$3m"
}

if [ "$color_prompt" = yes ]; then
    # Control sequences need to be wrapped in '\[' and '\]', or else inputs
    # that exceed one line may wrap over incorrectly by overwriting the
    # characters at the beginning of the current line.

    # Fonts
    DEFAULT="\[\e[0m\]"
    BOLD="\[\e[1m\]"
    UNDER="\[\e[4m\]"
    INVERT="\[\e[7m\]"

    # Font Colors
    # 3/4 Bit Colors
    # The bold font implicitly changes the color, so it's not recommended to use
    # these colors in conjunction with it.
    BLACK="\[\e[30m\]"
    RED="\[\e[31m\]"
    GREEN="\[\e[32m\]"
    YELLOW="\[\e[33m\]"
    BLUE="\[\e[34m\]"
    MAGENTA="\[\e[35m\]"
    CYAN="\[\e[36m\]"
    WHITE="\[\e[37m\]"
    LIGHT_BLACK="\[\e[90m\]"
    LIGHT_RED="\[\e[91m\]"
    LIGHT_GREEN="\[\e[92m\]"
    LIGHT_YELLOW="\[\e[93m\]"
    LIGHT_BLUE="\[\e[94m\]"
    LIGHT_MAGENTA="\[\e[95m\]"
    LIGHT_CYAN="\[\e[96m\]"
    LIGHT_WHITE="\[\e[97m\]"

    # 24-bit Colors
    GREY="\[$(fgcolor 128 128 128)\]"
fi

PROMPT_COMMAND=promptCommand

unset color_prompt force_color_prompt
